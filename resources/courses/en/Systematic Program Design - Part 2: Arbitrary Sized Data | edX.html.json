{
    "description": "This programming course is unique in focusing on learning a design method rather than a programming language.  This practical method builds on years of research into the structure of good programs that will help you channel your creativity to program well in any language.\n\nA primary challenge in programming is deciding exactly what our program should do. The first contribution of the design method is a set of techniques that help you systematically develop your program requirements. You will also learn to produce programs with consistent structure that are easy to modify later. This is important because useful programs always require later improvements. In addition, you will learn how to make your programs more reliable by building tests as an integral part of the programming process.  \n\n How to represent information as data\n\t How to focus each part of your program on a single task\n\t How to use examples to clarify what your program should do\n\t How to determine the proper tests for a program\n\t How to simplify the structure of your program using common patterns",
    "contents": "Course Syllabus\n        Syllabus\n\nThis is a full university course broken into three parts:\n\nIn Part 1 you will learn the core design method with a focus on simple data. In this part of the course, we introduce the idea of structuring a program based on the data it consumes. This part concludes with the design of simple interactive programs. The final project is an interactive game.\n\nIn Part 2, the focus is on more elaborate forms of data that can be used for more complex information. You will learn when and how to structure data using lists and trees. The final project will be a more elaborate interactive game in which more complex data structures are required.\n\nIn Part 3 you will learn about search, generative recursion, graphs and how to blend different kinds of structuring patterns together in more complex programs.  This part of the course concludes with a complex puzzle solving program project.\n\nThe course uses a small teaching language that includes the core features of nearly all other languages like Python, Javascript, Ruby, Java etc. Less than a week is required to learn nearly the whole language—the entire rest of the course is spent on program design. The focus on design together with the core nature of the language means that everything you learn will be applicable in any other language you use in the future.\n\nSee also:\n\nSystematic Program Design - Part 1: The Core Method\n\nSystematic Program Design - Part 3: Abstraction, Search and Graphs",
    "instructors": "Gregor Kiczales",
    "requirements": "Basic secondary school (high school) math.\nNo programming experience required, but many experienced programmers take this course to become better programmers.",
    "length": "5 weeks",
    "effort": "8-12 hours\/week",
    "prices": "Free\n        \n         \n         Add a Verified Certificate for $50",
    "institutions": "UBCx",
    "subjects": "Computer Science",
    "language": "English",
    "url": "https:\/\/www.edx.org\/course\/systematic-program-design-part-2-ubcx-spd2x",
    "title": "Systematic Program Design - Part 2: Arbitrary Sized Data"
}