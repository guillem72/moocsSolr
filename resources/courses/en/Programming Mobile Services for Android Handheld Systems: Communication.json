{
    "source": "Coursera",
    "description": "This MOOC describes by example how to apply patterns and frameworks to alleviate the complexity of developing concurrent software for mobile devices via the use of object-oriented design techniques. A pattern describes a reusable solution to a common problem that arises within a particular context. A framework is an integrated set of components that collaborate to provide a reusable architecture for a family of related apps or services. &nbsp;Frameworks can also be viewed as concrete realizations of patterns that facilitate direct reuse of detailed design and source code.This MOOC will cover fundamental techniques, patterns, and frameworks related to communicating with local and remote services. In particular, this MOOC course will cover Android mechanisms for interacting with local&nbsp;bound and started services via&nbsp;Intents, Messengers, and the&nbsp;Android Interface Definition Language (AIDL).&nbsp; It will also focus on interacting with&nbsp;remote web services using HTTP and data marshalling with JSON. Remote interaction models, ranging from request on demand, polling, push, and sockets will be discussed. Students that complete this MOOC will have a solid understanding of how to build Android applications and local services that can interact with remote services, handle data marshaling, and perform error handling. Hands-on programming projects will require students to develop Android applications that interact with REST-based services.The Mobile Cloud Computing with Android (MoCCA) SpecializationThis is the fourth course of the six-course Mobile Cloud Computing with Android (MoCCA) Specialization. It has been designed as part of a Coursera Specialization designed to help learners create complex, cloud-based Android Applications, and includes a final “capstone” project for those who earn Verified Certificates across all six courses.Note: We are proud to announce that the MoCCA specialization has already reached hundreds of thousands of learners around the globe. In its last iteration, we worked with Google to provide Nexus tablets, feedback from the Google App team, and the potential to be featured in the Google Play store to top course completers.This time around, we are providing more flexibility for all of you busy learners. We are running the Programming Mobile Applications courses in more digestible one-month-long sections, each with a meaningful mini-project at the end. Additionally, we will be re-offering the courses more frequently. For example, new sessions of my two introductory courses will be launched on a monthly basis, so that you can find a convenient time to join us or pick up where you left off if you didn’t quite finish before.For previous MoCCA students: If you have already earned a Verified Certificate in the previous version of this course, \"Pattern-Oriented Software Architectures: Programming Mobile Services for Android Handheld Systems” offered in May 2014, you do not need to retake this course to continue towards the Specialization certificate and final project in 2015. Please consult the Specializations Help Center or contact the Coursera support team if you are not sure whether you qualify.This MOOC and five others, taught by Dr. Adam Porter from the University of Maryland and Dr. Jules White from Vanderbilt University, have been designed to complement each other as part of the first trans-institution sequence of MOOCs taught on the Coursera platform, structured as follows:The first two courses by Dr. Adam Porter, of the University of Maryland, are Programming Mobile Applications for Android Handheld Systems Part 1 and Part 2. They focus on the design and programming of user-facing applications. &nbsp;The third and fourth courses by Dr. Douglas Schmidt, of Vanderbilt University, are Programming Mobile Services for Android Handheld Systems: Concurrency and Communication. They focus on middleware systems programming topics, such as synchronous and asynchronous concurrency models, background service processing, structured data management, local inter-process communication and networking, and integration with cloud-based services. &nbsp;The fifth and sixth courses by Dr. Jules White, of Vanderbilt University, are Programming Cloud Services for Android Handheld Systems: Spring and Security. &nbsp;They focus on how to connect Android mobile devices to cloud computing and data storage resources, essentially turning a device into an extension of powerful cloud-based services on popular cloud computing platforms, such as Google App Engine and Amazon EC2. The final “capstone” project will require students to develop a complex mobile cloud computing application from the ground up.Some of the programming assignments for these MOOCs will be coordinated. &nbsp;If you just want to take some of the MOOCs in this sequence or take them all in different order you’re certainly welcome to do so, and you’ll still learn a lot. However, if you take all the MOOCs in this sequence in the order presented you’ll gain a deeper, end-to-end understanding of handheld systems, their applications and services, as well as their integration into the cloud. In this course, we will learn how to apply patterns and frameworks to alleviate the complexity of developing concurrent and networked applications and services on mobile devices running Android that connect to popular cloud computing platforms. ",
    "contents": "The course is organized into the following sections:Section 0: Course IntroductionPart 1:Course Structure and TopicsPart 2: Course Prerequisites and Learning StrategiesSection 1: Android Services and Local IPCPart 1: Overview of Started and Bound ServicesPart 2: Activity and Service CommunicationPart 3: Service to Activity Communication Using Android MessengerPart 4: Programming Started ServicesPart 5: Android IntentServicePart 6: Programming Bound Services with MessengersPart 7: Overview of the Android Interface Definition Language (AIDL)Part 8: Programming Bound Services with AIDLSection 3: Android Remote IPCPart 1: Overview of Hyper-Text Transfer Protocol (HTTP)Part 2: Designing Mobile Applications with HTTP CommunicationPart 3:&nbsp;Better Client-side Communication Abstractions for HTTPSection 4: &nbsp;Communication Patterns in AndroidPart 1: Activating Services on Demand with the Activator PatternPart 2: Passing Commands to Services with the Command Processor PatternPart 3: Automating Marshaling and Demarshaling of Data with the Proxy PatternPart 4: Supporting Object-Oriented Remote Method Calls with the Broker PatternThroughout the MOOC we'll focus on pattern-oriented software architecture, with an emphasis on concurrent and networked programming in the context of Android middleware systems programming mechanisms, such as synchronous and asynchronous concurrency models, background service processing, and local\/remote inter-process communication (IPC) and networking. We illustrate&nbsp;by example&nbsp;how key pattern and framework concepts and relationships are applied in Android Services and various local and remote IPC mechanisms from both an application and infrastructure perspective. Many code examples are shown throughout using Java, with a case study project used to reify the key points throughout all the modules in this section.The PDF and PowerPoint versions of all the slides used in the course will be available online as the videos become available on the course website.",
    "requirements": "Ideally, students who take this course will have already taken Professor Porter’s MOOCs on “Programming Mobile Applications with Android Handheld Systems”, as well as Part 1 of “Programming Mobile Services for Android Handheld Systems.” Students should also be familiar with general object-oriented design and programming concepts (such as encapsulation, abstraction, polymorphism, extensibility, and the Unified Modeling Language (UML) ), fundamental object-oriented programming language features (such as classes, inheritance, dynamic binding, and generics available in Java, basic systems programming concepts (such as event handling, processes\/threads, synchronization, interprocess communication, and dynamic linking), and networking terminology (such as client\/server and peer-to-peer architectures, TCP\/IP, and layering). &nbsp;We will review object-oriented design, systems programming, and networking concepts and techniques, so students who understand how to read\/write Java code examples should be fine.",
    "effort": "8-12 hours\/week",
    "language": "en",
    "url": "https:\/\/www.coursera.org\/course\/posacommunication",
    "title": "Programming Mobile Services for Android Handheld Systems: Communication",
    "courseraId": "2624",
    "subjects": "Computer Science: Software Engineering, Information, Tech & Design, Computer Science: Systems & Security"
}