{
    "source": "Coursera",
    "description": "This MOOC describes by example how to apply patterns and frameworks to alleviate the complexity of developing concurrent software for mobile devices via the use of object-oriented design techniques. A pattern describes a reusable solution to a common problem that arises within a particular context. A framework is an integrated set of components that collaborate to provide a reusable architecture for a family of related apps or services. &nbsp;Frameworks can also be viewed as concrete realizations of patterns that facilitate direct reuse of detailed design and source code.This MOOC will cover Android's Handlers, Messages, and Runnables (HaMeR) framework and its AsyncTask framework, which simplify the development of Android applications that can run long-duration operations in background threads and then publish the results of these operations to the User Interface thread, which then performs short-duration user-facing operations. &nbsp;Some coverage of Java threads will be included to provide background on concurrent programming. Hands-on programming projects will require students to apply these two concurrency frameworks to representative Android applications.The Mobile Cloud Computing with Android (MoCCA) SpecializationThis is the third course of the six-course Mobile Cloud Computing with Android (MoCCA) Specialization. It has been designed as part of a Coursera Specialization designed to help learners create complex, cloud-based Android Applications, and includes a final “capstone” project for those who earn Verified Certificates across all six courses.Note: We are proud to announce that the MoCCA specialization has already reached hundreds of thousands of learners around the globe. In its last iteration, we worked with Google to provide Nexus tablets, feedback from the Google App team, and the potential to be featured in the Google Play store to top course completers.This time around, we are providing more flexibility for all of you busy learners. We are running the Programming Mobile Applications courses in more digestible one-month-long sections, each with a meaningful mini-project at the end. Additionally, we will be re-offering the courses more frequently. For example, new sessions of my two introductory courses will be launched on a monthly basis, so that you can find a convenient time to join us or pick up where you left off if you didn’t quite finish before.For previous MoCCA students: If you have already earned a Verified Certificate in the previous version of this course, \"Pattern-Oriented Software Architectures: Programming Mobile Services for Android Handheld Systems” offered in May 2014, you do not need to retake this course to continue towards the Specialization certificate and final project in 2015. Please consult the Specializations Help Center or contact the Coursera support team if you are not sure whether you qualify.This MOOC and six others, taught by Dr. Adam Porter from the University of Maryland and Dr. Jules White from Vanderbilt University, have been designed to complement each other as part of the first trans-institution sequence of MOOCs taught on the Coursera platform, structured as follows:The first two MOOCs by Dr. Adam Porter, of the University of Maryland, are Programming Mobile Applications for Android Handheld Systems Part 1 and Part 2. They focus on the design and programming of user-facing applications. &nbsp;The third, fourth. and fifth MOOCs by Dr. Douglas Schmidt, of Vanderbilt University, are Programming Mobile Services for Android Handheld Systems: Concurrency, Communication, and Content.&nbsp;They focus on middleware systems programming topics, such as synchronous and asynchronous concurrency models, background service processing, structured data management, local inter-process communication and networking, and integration with cloud-based services. &nbsp;The sixth and seventh MOOCs by Dr. Jules White, of Vanderbilt University, are Programming Cloud Services for Android Handheld Systems: Spring and Security. &nbsp;They focus on how to connect Android mobile devices to cloud computing and data storage resources, essentially turning a device into an extension of powerful cloud-based services on popular cloud computing platforms, such as Google App Engine and Amazon EC2. The final “capstone” project will require students to develop a complex mobile cloud computing application from the ground up.Some of the programming assignments for these MOOCs will be coordinated. &nbsp;If you just want to take some of the MOOCs in this sequence or take them all in different order you’re certainly welcome to do so, and you’ll still learn a lot. However, if you take all the MOOCs in this sequence in the order presented you’ll gain a deeper, end-to-end understanding of handheld systems, their applications and services, as well as their integration into the cloud. In this MOOC, we will learn how to apply patterns and frameworks to alleviate the complexity of developing concurrent applications on mobile devices running Android that connect to popular cloud computing platforms. ",
    "contents": "This MOOC is organized into the following sections (all of which contain a mixture of pre-recorded videos and all of which&nbsp;are subject to change):Section 0: Course IntroductionPart 1: Course Organization and TopicsPart 2: Course Prerequisites, Workload, and Learning StrategiesPart 3:&nbsp;Concurrency MotivationsPart 4:&nbsp;Concurrency Challenges&nbsp;Part 5:&nbsp;Overview of Patterns and Frameworks&nbsp;Part 6:&nbsp;Overview of Android LayersSection 1: Overview of Concurrency for Android and JavaPart 1: Java Threading MechanismsPart 2: Java Built-in Synchronization MechanismsPart 3: Java SemaphoresSection 2: Android Concurrency Frameworks: ProgrammingPart 1: Overview of Android Concurrency Framework ClassesPart 2:&nbsp;Overview of the Threaded Downloads ApplicationPart 3:&nbsp;Overview of &nbsp;Handlers, Messages, and Runnables (HaMeR) FrameworkPart 4: Overview of the AsyncTask FrameworkPart 5: Evaluating Android Concurrency FrameworksSection 3: Android Concurrency Frameworks: InternalsPart 1:&nbsp;&nbsp;Android LooperPart 2:&nbsp;Android Handler&nbsp;Part 3:&nbsp;Posting and Processing Runnables with the Android HaMeR FrameworkPart 4:&nbsp;Sending and Handling Messages with the Android HaMeR FrameworkPart 5: Blackbox and Whitebox Frameworks with AsyncTaskSection 4: Communication Patterns in AndroidPart 1:&nbsp;Overview of Android Concurrency Framework PatternsPart 2: Coordinating Concurrent Access with the Monitor Object PatternPart 3: Ensuring Only One Looper Per Thread with the Thread-Specific Storage PatternPart 4: Passing Commands to Handlers with the Command Processor PatternPart 5: Passing Messages to Handlers with the Active Object PatternPart 6: Decoupling Synchronous and Synchronous Processing with the Half-Sync\/Half-Async PatternThroughout this MOOC we'll focus on pattern-oriented software architecture, with an emphasis on concurrent programming in the context of Android middleware systems programming mechanisms, such as synchronous and asynchronous concurrency models. We illustrate by example how key pattern and framework concepts and relationships are applied in Android from both an application and infrastructure perspective. Many code examples are shown throughout using Java, with case study projects used to reify the key points throughout all the material in this MOOC.The PDF versions of all the slides used in the MOOC will be available online as the videos become available on the MOOC website.",
    "requirements": "Ideally, students who take this MOOC will have already taken Professor Porter’s MOOCs on “Programming Mobile Applications with Android Handheld Systems”. Students should also be familiar with general object-oriented design and programming concepts (such as encapsulation, abstraction, polymorphism, extensibility, and the Unified Modeling Language (UML)), fundamental object-oriented programming language features (such as classes, inheritance, dynamic binding, and generics available in Java, basic systems programming concepts (such as event handling, processes\/threads, synchronization, inter-process communication, and dynamic linking), and networking terminology (such as client\/server and peer-to-peer architectures, TCP\/IP, and layering). &nbsp;Overviews of object-oriented design, systems programming, and networking concepts and techniques are available in the supplemental videos, but it's essential that students &nbsp;understand how to read\/write Java code examples.",
    "effort": "8-12 hours\/week",
    "language": "en",
    "url": "https:\/\/www.coursera.org\/course\/posaconcurrency",
    "title": "Programming Mobile Services for Android Handheld Systems: Concurrency",
    "courseraId": "2623",
    "subjects": "Computer Science: Software Engineering, Information, Tech & Design, Computer Science: Systems & Security"
}