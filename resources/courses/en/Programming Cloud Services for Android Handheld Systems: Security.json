{
    "source": "Coursera",
    "description": "A key challenge of mobile platforms is that the apps installed on a device increase the number of potential security vulnerabilities. Mistakes in app development or cloud services can lead to vulnerabilities that cause users data to be stolen, charges to user accounts, and spread of malware to a user’s friends. Ensuring that mobile cloud application developers are aware of potential vulnerabilities and avoid introducing them into their code is an essential part of building a more secure app ecosystem.The course is designed to help students understand how to write more secure mobile cloud applications for Android. Students will be introduced to specific vulnerabilities that have affected well-known apps and be given a wide view of app threats on Android. Developers will also be introduced to the secure coding techniques that can be used to help prevent the introduction of app and cloud service vulnerabilities.The Mobile Cloud Computing with Android (MoCCA) SpecializationThis is the 6th course of the six-course Mobile Cloud Computing with Android (MoCCA) Specialization. It has been designed as part of a Coursera Specialization designed to help learners create complex, cloud-based Android Applications, and includes a final “capstone” project for those who earn Verified Certificates across all six courses.Note: We are proud to announce that the MoCCA specialization has already reached hundreds of thousands of learners around the globe. In its last iteration, we worked with Google to provide Nexus tablets, feedback from the Google App team, and the potential to be featured in the Google Play store to top course completers.This time around, we are providing more flexibility for all of you busy learners. We are running the Programming Mobile Applications courses in more digestible one-month-long sections, each with a meaningful mini-project at the end. Additionally, we will be re-offering the courses more frequently. For example, new sessions of my two introductory courses will be launched on a monthly basis, so that you can find a convenient time to join us or pick up where you left off if you didn’t quite finish before.For previous MoCCA students: If you have already earned a Verified Certificate in the previous version of this course, \"Pattern-Oriented Software Architectures: Programming Mobile Services for Android Handheld Systems” offered in May 2014, you do not need to retake this course to continue towards the Specialization certificate and final project in 2015. Please consult the Specializations Help Center or contact the Coursera support team if you are not sure whether you qualify.This MOOC and five others, taught by Dr. Adam Porter from the University of Maryland and Dr. Jules White from Vanderbilt University, have been designed to complement each other as part of the first trans-institution sequence of MOOCs taught on the Coursera platform, structured as follows:The first two courses by Dr. Adam Porter, of the University of Maryland, are Programming Mobile Applications for Android Handheld Systems Part 1 and Part 2. They focus on the design and programming of user-facing applications. &nbsp;The third and fourth courses by Dr. Douglas Schmidt, of Vanderbilt University, are Programming Mobile Services for Android Handheld Systems: Concurrency and Communication. They focus on middleware systems programming topics, such as synchronous and asynchronous concurrency models, background service processing, structured data management, local inter-process communication and networking, and integration with cloud-based services. &nbsp;The fifth and sixth courses by Dr. Jules White, of Vanderbilt University, are Programming Cloud Services for Android Handheld Systems: Spring and Security. &nbsp;They focus on how to connect Android mobile devices to cloud computing and data storage resources, essentially turning a device into an extension of powerful cloud-based services on popular cloud computing platforms, such as Google App Engine and Amazon EC2. The final “capstone” project will require students to develop a complex mobile cloud computing application from the ground up.Some of the programming assignments and the iRemember integrative project for these MOOCs will be coordinated. &nbsp;If you just want to take some of the MOOCs in this sequence or take them all in different order you’re certainly welcome to do so, and you’ll still learn a lot. However, if you take all the MOOCs in this sequence in the order presented you’ll gain a deeper, end-to-end understanding of handheld systems, their applications and services, as well as their integration into the cloud. This course introduces students to basic issues in mobile cloud security, malware, and secure client\/server communication. Students will learn about security risks in Android and cloud services, threat mitigation strategies, secure coding practices, and tools for managing security of devices. ",
    "contents": "This MOOC describes, by example, the basics of securing mobile applications and back-end cloud services. The class is taught in the context of Java, Android, and&nbsp;the Java Spring Framework. Although the cloud service topics in this course will be taught in the context of connecting mobile devices to the cloud, the concepts are broader and will give students the ability to create the cloud services to support large-scale web applications, such as social networking applications; cloud services for embedded systems, such as the Internet of Things and Industrial Internet; and wearable computing devices.The course is organized into the sections outlined below (additional lectures may be provided live once the MOOC has begun):Module 1: Android App Security and RisksPart 1: Traditional App AccountsPart 2: Mobile vs. Traditional App AccountsPart 3: App Account Mapping to Linux UsersPart 4: Apps Lie &amp; StealPart 5: How Android Protects AppsPart 6: What Android Doesn't ProtectPart 7: Avoid Storing Sensitive Data in Public LocationsPart 8: Risks of Insecure File PermissionsModule 2: Building More Secure Android AppsPart 0: The Challenge of Secure CodingPart 1: Security Vulnerability WalkthroughPart 2: Principles of Secure AbstractionsPart 3: Avoid Coupling Data &amp; Security StatePart 4: Build Abstractions that are Hard to Use InsecurelyPart 5: Bound &amp; Strongly Type Security StatePart 6: Avoid Conditional Logic in Secure PathwaysPart 7: Prevent Secure Pathways from Being Broken at RuntimePart 8: Privilege Escalation ConceptsPart 9: Privilege Escalation ScenarioPart 10: Privilege Escalation Code WalkthroughPart 11: Privilege Escalation FixesPart 12: User Interface AttacksPart 13: Cross-platform User Interface AttacksModule 3: Secure HTTP CommunicationPart 1: Man in the Middle Attacks Public Key InfrastructurePart 2: HTTPSPart 3: Challenges of Storing Secrets on MobilePart 4: WebView Security Issues &amp; Best PracticesModule 4: What was I Saying: Keeping Track of SessionsPart 1: SessionsPart 2: Spring Security OverviewPart 3: Spring Security Configuration in JavaPart 4: Building a Custom UserDetailsServicePart 5: Setting up a custom UserDetailsServicePart 6: The PrincipalPart 7: Spring Security Role AnnotationsPart 8: More Complex Expression-based Pre Post Authorize AnnotationsPart 9: Spring Security Controller Code WalkthroughPart 10: Spring Security Controller Test Code WalkthroughModule 5: Authenticating Mobile Clients with OAuthPart 1: Stateful Sessions with Cookies Why They Aren't Ideal for MobilePart 2: Stateless Sessions with TokensPart 3: OAuth 2.0Part 4: Spring Security OAuth 2.0Part 5: A Spring OAuth 2.0 Secured ServicePart 6: A Retrofit Oauth 2.0 Client for Password Grants",
    "requirements": "Ideally, students who take this course will be familiar with general object-oriented design and programming concepts (such as encapsulation, abstraction, polymorphism, extensibility ), fundamental Java object-oriented programming language features (such as classes, inheritance, interfaces, and generics available in Java, basic systems programming concepts (such as event handling, processes\/threads, synchronization), and networking terminology (such as client\/server and peer-to-peer architectures). &nbsp;",
    "effort": "8-12 hours\/week",
    "language": "en",
    "url": "https:\/\/www.coursera.org\/course\/mobilecloudsecurity",
    "title": "Programming Cloud Services for Android Handheld Systems: Security",
    "courseraId": "2626",
    "subjects": "Computer Science: Software Engineering, Information, Tech & Design, Computer Science: Systems & Security"
}