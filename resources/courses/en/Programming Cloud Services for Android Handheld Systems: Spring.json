{
    "source": "Coursera",
    "description": "This MOOC describes by example how to connect Android mobile devices to clouds via the use of object-oriented design techniques, Java programming language features,&nbsp;Jetty&nbsp;middleware,&nbsp;Java Servlets, the&nbsp;Java Spring Framework, and&nbsp;cloud computing platforms, such as&nbsp;Google App Engine. Although there will be 10 weeks of lecture material, the required core of the course is six weeks long and can be completed flexibly within the ten week schedule to provide flexibility for students during the summer.An extended case study project will be used throughout the required core of the MOOC to showcase architectures for communicating with the cloud using HTTP, server-side processing of mobile data using servlets and the Java Spring Framework, and scalable storage of data using no-SQL databases and other platforms. Due to the importance of building secure and scalable mobile\/cloud platforms, this MOOC will not only show you how to program handheld systems that talk to the cloud, but how to do so securely, scalably, and efficiently. Security and scalability topics will be woven into discussions of cloud service creation so that students learn, from the start, how to create robust cloud services for mobile devices.Four weeks of optional lecture material will also be provided for students who would like to gain a deeper understanding of the patterns and frameworks for building cloud infrastructure building. This material will be presented in the context of the open-source&nbsp;JAWS&nbsp;web server, which is implemented in C++ as part of the&nbsp;ACE&nbsp;open-source object-oriented concurrent and networked programming toolkit.Although the cloud service topics in this course will be taught in the context of connecting mobile devices to the cloud, the concepts are broader and will give students the ability to create the cloud services to support large-scale web applications, such as social networking applications; cloud services for embedded systems, such as the Internet of Things and Industrial Internet; and wearable computing devices, such as Google Glass.The Mobile Cloud Computing with Android (MoCCA) SpecializationThis is the 5th course&nbsp;of the six-course&nbsp;Mobile Cloud Computing with Android (MoCCA) Specialization. It has been designed as part of a Coursera Specialization designed to help learners create complex, cloud-based Android Applications, and includes a final “capstone” project for those who earn Verified Certificates across all six courses.Note:&nbsp;We are proud to announce that the MoCCA specialization has already reached hundreds of thousands of learners around the globe. In its last iteration, we worked with Google to provide Nexus tablets, feedback from the Google App team, and the potential to be featured in the Google Play store to top course completers.This time around, we are providing more flexibility for all of you busy learners. We are running the Programming Mobile Applications courses in more digestible one-month-long sections, each with a meaningful mini-project at the end. Additionally, we will be re-offering the courses more frequently. For example, new sessions of my two introductory courses will be launched on a monthly basis, so that you can find a convenient time to join us or pick up where you left off if you didn’t quite finish before.For previous MoCCA students:&nbsp;If you have already earned a Verified Certificate in the previous version of this course, \"Pattern-Oriented Software Architectures: Programming Mobile Services for Android Handheld Systems” offered in May 2014, you do not need to retake this course to continue towards the Specialization certificate and final project in 2015. Please consult the&nbsp;Specializations Help Center&nbsp;or contact the&nbsp;Coursera support team&nbsp;if you are not sure whether you qualify.This MOOC and five others, taught by Dr. Adam Porter from the University of Maryland and Dr. Jules White from Vanderbilt University, have been designed to complement each other as part of the first trans-institution sequence of MOOCs taught on the Coursera platform, structured as follows:The first two courses by Dr. Adam Porter, of the University of Maryland, are&nbsp;Programming Mobile Applications for Android Handheld Systems Part 1&nbsp;and&nbsp;Part 2. They focus on the design and programming of user-facing applications. &nbsp;The third and fourth courses by Dr. Douglas Schmidt, of Vanderbilt University, are&nbsp;Programming Mobile Services for Android Handheld Systems: Concurrency&nbsp;and&nbsp;Communication. They focus on middleware systems programming topics, such as synchronous and asynchronous concurrency models, background service processing, structured data management, local inter-process communication and networking, and integration with cloud-based services. &nbsp;The fifth and sixth courses by Dr. Jules White, of Vanderbilt University, are&nbsp;Programming Cloud Services for Android Handheld Systems: Spring&nbsp;and&nbsp;Security. &nbsp;They focus on how to connect Android mobile devices to cloud computing and data storage resources, essentially turning a device into an extension of powerful cloud-based services on popular cloud computing platforms, such as Google App Engine and Amazon EC2.The final “capstone” project will require students to develop a complex mobile cloud computing application from the ground up.Some of the programming assignments and the iRemember integrative project for these MOOCs will be coordinated. &nbsp;If you just want to take some of the MOOCs in this sequence or take them all in different order you’re certainly welcome to do so, and you’ll still learn a lot. However, if you take all the MOOCs in this sequence in the order presented you’ll gain a deeper, end-to-end understanding of handheld systems, their applications and services, as well as their integration into the cloud. In this course we will learn how to connect Android mobile devices to cloud computing and data storage resources, essentially turning a device into an extension of powerful cloud-based services on popular cloud computing platforms, such as Google App Engine and Amazon EC2. ",
    "contents": "This MOOC describes by example how to connect Android mobile devices to clouds via the use of object-oriented design techniques; Java programming language features; Android Content Providers, Content Resolvers, and SQLite databases;&nbsp;Jetty&nbsp;middleware;&nbsp;Java Servlets, the&nbsp;Java Spring Framework;&nbsp;and&nbsp;cloud computing platforms, such as&nbsp;Google App Engine.&nbsp;An extended case study project will be used throughout the required core of the MOOC to showcase architectures for communicating with the cloud using HTTP, server-side processing of mobile data using servlets and the Java Spring Framework, and scalable storage of data using no-SQL databases and other platforms. Due to the importance of building secure and scalable mobile\/cloud platforms, this MOOC will not only show you how to program handheld systems that talk to the cloud, but how to do so securely, scalably, and efficiently. Security and scalability topics will be woven into discussions of cloud service creation so that students learn, from the start, how to create robust cloud services for mobile devices.Optional lecture material will also be provided for students who would like to gain a deeper understanding of the patterns and frameworks for building cloud infrastructure building. This material will be presented in the context of the open-source&nbsp;JAWS&nbsp;web server, which is implemented in C++ as part of the&nbsp;ACE&nbsp;open-source object-oriented concurrent and networked programming toolkit.Although the cloud service topics in this course will be taught in the context of connecting mobile devices to the cloud, the concepts are broader and will give students the ability to create the cloud services to support large-scale web applications, such as social networking applications; cloud services for embedded systems, such as the Internet of Things and Industrial Internet; and wearable computing devices, such as Google Glass.&nbsp;The course is organized into the sections outlined below.Section 0: Overview of HTTP [Optional for students who took the POSA Communication MOOC]Module 1: Overview of Hyper-Text Transfer Protocol (HTTP)What are Communication Protocols?Intro to HTTPWhy HTTP?What is a Cloud ServiceHTTP Request MethodsHTTP Request AnatomyURLs Query ParametersCompleted HTTP Response AnatomyCompleted HTTP Response CodesCompleted HTTP CookiesModule 2: Designing Mobile Applications with HTTP CommunicationBuilding Cloud Services on HTTP&nbsp;Overview of RESTPush MessagingIntro to Java AnnotationsCompleted HTTP to Object MarshallingCompleted Intro to JSONModule 3: Better Client-side Communication Abstractions for HTTPIntroduction to RetrofitRetrofit Client Code WalkthroughSection 1: Structured Data Storage on AndroidPart 1: &nbsp;Overview of Android Content Providers and Content ResolversPart 2:&nbsp;Programming with Android Content ResolversPart 3: Programming Android Content ProvidersPart 4:&nbsp;Overview of SQLite&nbsp;Part 5: Asynchronous Access to Content Providers&nbsp;Section 2: Building Java Cloud ServicesModule 1: Java ServletsWhat are Servlets?A First Cloud Service with a ServletWeb.xmlVideo Servlet Code WalkthroughVideo Servlet Test Walkthrough with HttpClientSecurely Handling Client Data Avoiding Injection AttacksModule 2: Better Abstractions for Building Java Cloud ServicesIntro to Java AnnotationsHTTP to Object MarshallingIntro to JSONThe Spring Dispatcher Servlet and the Controller AbstractionIntro to Spring ControllersAccepting Client Data with RequestParam AnnotationsAccepting Client Data with PathVar AnnotationsAccepting Client Data with RequestBody Annotations and JSONHandling Multipart DataGenerating Responses with the ResponseBody AnnotationCustom Marshalling with Jackson Annotations Serializers\/DeserializersSpring Boot Application StructureSpring Controller Code WalkthroughSpring Controller Test Code WalkthroughModule 3: Better Client-side Communication AbstractionsIntroduction to RetrofitRetrofit Client Code WalkthroughAndroid Retrofit Client Code WalkthroughModule 4: Building Loosely Coupled and Extensible Java ServicesSpring Dependency Injection Auto-wiringSpring Configuration AnnotationsSpring Dependency Injection Controller Code WalkthroughSpring Dependency Injection Controller Test Code WalkthroughSection 3: Building Database-driven Java Cloud ServicesModule 1: Persistent ObjectsObject to DB MappingJPAEntitiesRepositoriesUnderstanding SQL Injection AttacksSpring Data Code WalkthroughModule 2: RESTful Services for Persistent ObjectsSpring Data RESTSpring Data REST Code WalkthroughSection 4: Deploying to the Cloud ScalingModule 1: General Scaling StrategiesStateless vs. Stateful ApplicationsHorizontal ScalingAuto-scaling HorizontallyCachingOffloading to Cloud Provider ServicesAsynchronous IO in ControllersModule 2: Scaling Up Data StorageNoSQL DatabasesOptimizing for Key-based LookupsOptimizing for Reads vs. WritesContention ShardingMongo DBSpring Data Mongo DBDatabase as a ServiceAmazon DynamoSpring Data Dynamo DBApp Engine Big TableModule 3: Automating Packaging DeploymentDeploying to Infrastructure as a ServiceDeploying to Amazon EC2Packaging Web Applications into WAR filesAdapting Spring Boot Applications for Google App EngineDeploying to App EngineModule 4: Performance TestingIntro to Cloud Service Performance TestingApache JMeterBuilding Realistic TestsSection 5: Patterns and Frameworks for Concurrent and Networked Server Software [Optional Material]Module 1: Introduction to the Web Server Case StudyApplying Patterns and Frameworks to Concurrent and Networked SoftwareOverview of JAWS Web Server Case Study: Part 1Overview of JAWS Web Server Case Study: Part 2Overview of JAWS Web Server Case Study: Part 3Module 2: Patterns and Frameworks for Service Access and CommunicationAccidental Complexities with the Sockets APIThe Wrapper Facade PatternACE C++ Socket Wrapper FacadesApplying the ACE Wrapper Facades to a Web Client and ServerModule 3: Patterns and Frameworks for Synchronous Event Handling, Connections, and Service InitializationThe Reactor and Acceptor-Connector PatternsThe ACE Reactor FrameworkApplying the ACE Reactor to JAWSThe ACE Acceptor-Connector Framework and Applying it to JAWSModule 4: Patterns and Frameworks for Service Configuration and ActiviationThe Component Configurator PatternThe ACE Service Configurator FrameworkApplying the ACE Service Configurator to JAWSApplying the Activator Pattern to JAWSModule 5: Patterns and Frameworks for Concurrency and SynchronizationThe Active Object PatternThe ACE Task FrameworkApplying ACE Task and Acceptor-Connector to JAWSThe Half-Sync\/Half-Async PatternImplementing Half-Sync\/Half-Async Using ACEThe Monitor Object PatternApplying the Monitor Object and Synchronization Patterns to JAWSThe Leader\/Followers PatternApplying the Leader\/Followers Pattern and ACE_TP_Reactor to JAWSModule 6: Patterns and Frameworks for Asynchronous Event HandlingThe Proactor patternThe ACE Proactor FrameworkApplying the ACE Proactor Framework to JAWSThe Asynchronous Completion Token Pattern and Applying it to JAWSModule 7: SummaryEvaluating Patterns and Frameworks for Concurrent and Networked Software",
    "requirements": "Ideally, students who take this course will be familiar with general object-oriented design and programming concepts (such as encapsulation, abstraction, polymorphism, extensibility ), fundamental Java object-oriented programming language features (such as classes, inheritance, interfaces, and generics available in Java, basic systems programming concepts (such as event handling, processes\/threads, synchronization), and networking terminology (such as client\/server and peer-to-peer architectures). &nbsp;",
    "effort": "8-12 hours\/week",
    "language": "en",
    "url": "https:\/\/www.coursera.org\/course\/mobilecloudprogram",
    "title": "Programming Cloud Services for Android Handheld Systems: Spring",
    "courseraId": "2625",
    "subjects": "Computer Science: Software Engineering, Information, Tech & Design, Computer Science: Systems & Security"
}